package com.b2110941.UserService.service;

import com.b2110941.UserService.entity.MembershipTier;
import com.b2110941.UserService.entity.UserEntity;
import com.b2110941.UserService.payload.MembershipInfo;
import org.springframework.stereotype.Service;

@Service
public class MembershipService {

    public MembershipService() {
        System.out.println("üöÄ MembershipService: ƒê√£ kh·ªüi t·∫°o");
    }

    /**
     * C·∫≠p nh·∫≠t th√¥ng tin mua h√†ng c·ªßa user
     * @param user User c·∫ßn c·∫≠p nh·∫≠t
     * @param orderAmount S·ªë ti·ªÅn ƒë∆°n h√†ng
     * @param purchaseCount S·ªë l·∫ßn mua h√†ng (m·∫∑c ƒë·ªãnh l√† 1)
     * @return MembershipInfo m·ªõi
     */
    public MembershipInfo updatePurchaseInfo(UserEntity user, double orderAmount, int purchaseCount) {
        // üóìÔ∏è Ki·ªÉm tra v√† reset h·∫°ng th√†nh vi√™n theo th√°ng
        if (user.needsMonthlyReset()) {
            user.resetMonthlyStats();
            System.out.println("üîÑ ƒê√£ reset h·∫°ng th√†nh vi√™n cho user " + user.getUsername() + " theo th√°ng m·ªõi");
        }
        
        // TƒÉng s·ªë l·∫ßn mua h√†ng
        int newPurchaseCount = user.getPurchaseCount() + purchaseCount;
        user.setPurchaseCount(newPurchaseCount);
        
        // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn ƒë√£ chi
        double newTotalSpent = user.getTotalSpent() + orderAmount;
        user.setTotalSpent(newTotalSpent);
        
        // T·ª± ƒë·ªông c·∫≠p nh·∫≠t h·∫°ng th√†nh vi√™n
        MembershipTier newTier = MembershipTier.getTierByPurchaseCount(newPurchaseCount);
        user.setMembershipTier(newTier);
        
        return new MembershipInfo(newTier, newPurchaseCount, newTotalSpent);
    }

    /**
     * C·∫≠p nh·∫≠t th√¥ng tin mua h√†ng c·ªßa user (overload v·ªõi purchaseCount m·∫∑c ƒë·ªãnh l√† 1)
     * @param user User c·∫ßn c·∫≠p nh·∫≠t
     * @param orderAmount S·ªë ti·ªÅn ƒë∆°n h√†ng
     * @return MembershipInfo m·ªõi
     */
    public MembershipInfo updatePurchaseInfo(UserEntity user, double orderAmount) {
        return updatePurchaseInfo(user, orderAmount, 1);
    }

    /**
     * L·∫•y th√¥ng tin h·∫°ng th√†nh vi√™n hi·ªán t·∫°i
     * @param user User c·∫ßn ki·ªÉm tra
     * @return MembershipInfo
     */
    public MembershipInfo getMembershipInfo(UserEntity user) {
        // Kh·ªüi t·∫°o membershipTier n·∫øu ch∆∞a c√≥
        user.initializeMembershipTier();
        
        return new MembershipInfo(
            user.getMembershipTier(), 
            user.getPurchaseCount(), 
            user.getTotalSpent()
        );
    }

    /**
     * T√≠nh discount cho ƒë∆°n h√†ng d·ª±a tr√™n h·∫°ng th√†nh vi√™n
     * @param user User c·∫ßn t√≠nh discount
     * @param orderAmount S·ªë ti·ªÅn ƒë∆°n h√†ng
     * @return S·ªë ti·ªÅn ƒë∆∞·ª£c gi·∫£m
     */
    public double calculateDiscount(UserEntity user, double orderAmount) {
        double discountRate = user.getDiscountRate();
        return orderAmount * discountRate;
    }

    /**
     * Ki·ªÉm tra xem user c√≥ ƒë∆∞·ª£c l√™n h·∫°ng kh√¥ng
     * @param user User c·∫ßn ki·ªÉm tra
     * @return true n·∫øu ƒë∆∞·ª£c l√™n h·∫°ng
     */
    public boolean isEligibleForUpgrade(UserEntity user) {
        int currentCount = user.getPurchaseCount();
        MembershipTier currentTier = user.getMembershipTier();
        
        switch (currentTier) {
            case BRONZE:
                return currentCount >= 5;
            case SILVER:
                return currentCount >= 10;
            case GOLD:
                return currentCount >= 15;
            case DIAMOND:
                return false; // ƒê√£ ·ªü h·∫°ng cao nh·∫•t
            default:
                return false;
        }
    }

    /**
     * L·∫•y th√¥ng tin h·∫°ng ti·∫øp theo
     * @param user User c·∫ßn ki·ªÉm tra
     * @return Th√¥ng tin h·∫°ng ti·∫øp theo
     */
    public String getNextTierInfo(UserEntity user) {
        int currentCount = user.getPurchaseCount();
        
        if (currentCount < 5) {
            int remaining = 5 - currentCount;
            return String.format("C·∫ßn mua th√™m %d l·∫ßn ƒë·ªÉ l√™n h·∫°ng B·∫°c (gi·∫£m 1%%)", remaining);
        } else if (currentCount < 10) {
            int remaining = 10 - currentCount;
            return String.format("C·∫ßn mua th√™m %d l·∫ßn ƒë·ªÉ l√™n h·∫°ng V√†ng (gi·∫£m 3%%)", remaining);
        } else if (currentCount < 15) {
            int remaining = 15 - currentCount;
            return String.format("C·∫ßn mua th√™m %d l·∫ßn ƒë·ªÉ l√™n h·∫°ng Kim c∆∞∆°ng (gi·∫£m 5%%)", remaining);
        } else {
            return "B·∫°n ƒë√£ ·ªü h·∫°ng cao nh·∫•t! üéâ";
        }
    }
}

