package com.b2110941.ChatService.repository;

import com.b2110941.ChatService.entity.ChatLog;
import com.b2110941.ChatService.entity.ChatSummary;

import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.data.mongodb.repository.Query;

import java.util.Date;
import java.util.List;
import java.util.Optional;

public interface ChatLogRepository extends MongoRepository<ChatLog, String>, ChatLogRepositoryCustom {

    // üìå L·∫•y t·∫•t c·∫£ tin nh·∫Øn m√† user l√† sender ho·∫∑c receiver v·ªõi s·∫Øp x·∫øp
    @Query("{ '$or': [ { 'sender': ?0 }, { 'receiver': ?0 } ] }")
    List<ChatLog> findBySenderOrReceiver(String userId, Sort sort);

    // N·∫øu ch·ªâ l∆∞u 'sender' v√† kh√¥ng c√≥ 'receiver', d√πng c√°i n√†y (kh√¥ng c·∫ßn n·∫øu ƒë√£ c√≥ query tr√™n)
    List<ChatLog> findBySender(String sender);

    // T·∫°o t√≥m t·∫Øt tin nh·∫Øn cu·ªëi c√πng cho m·ªói user (c·∫ßn tri·ªÉn khai logic aggregation)
    @Query(value = "{ 'receiver': 'admin' }", sort = "{ 'timestamp': -1 }")
    List<ChatSummary> aggregateLastMessagesPerUser();

    // T√¨m tin nh·∫Øn ch∆∞a ƒë·ªçc gi·ªØa sender v√† receiver
    List<ChatLog> findBySenderAndReceiverAndReadIsFalse(String sender, String receiver);

    // ƒê·∫øm s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc gi·ªØa sender v√† receiver
    long countBySenderAndReceiverAndReadIsFalse(String sender, String receiver);

    // T√¨m tin nh·∫Øn d·ª±a tr√™n content v√† timestamp
    Optional<ChatLog> findByContentAndTimestamp(String content, Date timestamp);
}